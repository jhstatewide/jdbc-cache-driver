import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    `java-library`
    `maven-publish`
    kotlin("jvm") version "1.8.10"
    id("com.github.johnrengelman.shadow") version "8.0.0"
}

val githubUsername: String? by project
val githubToken: String? by project

tasks.withType<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar> {
    archiveClassifier.set("")

    relocate("kotlin", "io.github.jhstatewide.kotlin")
    relocate("org.jetbrains", "io.github.jhstatewide.jetbrains")
    relocate("org.intellij", "io.github.jhstatewide.intellij")
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/jhstatewide/kotlin-jdbc-cache-driver")
            credentials {
                username = githubUsername ?: project.findProperty("gpr.user") as String? ?: System.getenv("GITHUB_USERNAME")
                password = githubToken ?: project.findProperty("gpr.key") as String? ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        register<MavenPublication>("gpr") {
            from(components["java"])

            // include the shadow JAR with a "shadow" classifier
            artifact(tasks["shadowJar"]) {
                classifier = "shadow"
            }
        }
    }
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
    mavenCentral()
}

dependencies {
    testImplementation("org.apache.derby:derby:10.14.2.0")
    testImplementation("junit:junit:4.12")
    testImplementation("commons-io:commons-io:2.6")
    implementation(kotlin("stdlib-jdk8"))
    // kotlin coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")
}

group = "io.github.jhstatewide"
version = "1.4.7"
description = "JDBC Cache Driver"
java.sourceCompatibility = JavaVersion.VERSION_1_8

java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType<Javadoc> {
    enabled = false
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}
val compileKotlin: KotlinCompile by tasks
compileKotlin.kotlinOptions {
    jvmTarget = "1.8"
}
val compileTestKotlin: KotlinCompile by tasks
compileTestKotlin.kotlinOptions {
    jvmTarget = "1.8"
}
